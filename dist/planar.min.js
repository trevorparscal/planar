!function(){window.Planar={},Planar.Point=class{constructor(t=0,i=t){"object"==typeof t?(this.x=t.x,this.y=t.y):(this.x=t,this.y=i)}copy(t){this.x=t.x,this.y=t.y}set(t=0,i=t){this.x=t,this.y=i}clone(){return new this.constructor(this.x,this.y)}equals(t){return t.x===this.x&&t.y===this.y}}}();
!function(){Planar.Factory=class{constructor(t){this.superclass=t||Object,this.constructors=new Map}add(t,r){if("function"!=typeof r)throw new Error(`Constructor isn't a function.`);if(!(r.prototype instanceof this.superclass))throw new Error(`Constructor has the wrong superclass.`);if(this.constructors.has(t))throw this.constructors.get(t)===r?new Error(`"${t}" constructor has already been added.`):new Error(`"${t}" key has already been used by another constructor.`);return this.constructors.set(t,r),this}has(t){return this.constructors.has(t)}get(t){return this.constructors.get(t)}create(t,...r){if(!this.constructors.has(t))throw new Error(`"${t}" constructor doesn't exist.`);return new(this.constructors.get(t))(...r)}}}();
!function(){Planar.App=class{constructor(...t){this.running=!1,this.iteration=0,this.systems=new Set,this.entities=new Set,this.additions=new Set,this.deletions=new Set,this.then=null,this.request=null,this.debug=!0,this.loop=this.loop.bind(this);for(let i of t)this.systems.add(i);window.addEventListener("focus",()=>this.start()),window.addEventListener("blur",()=>this.stop()),document.addEventListener("visibilitychange",()=>{this[document.hidden?"stop":"start"]()})}flush(){for(let t of this.additions){this.entities.add(t);for(let i of this.systems)i.isRelated(t)&&i.add(t)}for(let t of this.deletions){this.entities.delete(t);for(let i of this.systems)i.has(t)&&i.delete(t);this.onDelete(t)}return this.additions.clear(),this.deletions.clear(),this}add(t){if(this.deletions.has(t))this.deletions.delete(t);else if(this.entities.has(t))throw new Error(`"${t.key}" already exists.`);if(this.additions.has(t))throw new Error(`"${t.key}" has already been added to addition queue.`);return this.additions.add(t),this}delete(t){if(this.deletions.has(t))throw new Error(`"${t.key}" has already been added to deletion queue.`);if(!t)throw new Error(`"${t.key}" doesn't exist.`);return this.additions.has(t)&&this.additions.delete(t),this.deletions.add(t),this}clear(){return this.additions.clear(),this.deletions.clear(),this.entities.forEach(this.deletions.add,this.deletions),this}start(){return this.running||(this.running=!0,this.then=performance.now(),this.loop(this.then),document.title="(Running)"),this}stop(){return this.running&&(cancelAnimationFrame(this.request),this.running=!1,this.then=null,document.title="(Idle)"),this}loop(t){if(this.running){let i=Math.min(t-this.then,200);this.then=t,this.iteration++,this.flush();for(let n of this.systems)n.update(i);for(let e of this.entities)e.update(i);this.request=requestAnimationFrame(this.loop)}}}}();
!function(){Planar.Component=class{static define(n){for(let r in n){let e=class extends Planar.Component{};e.schema=n[r],Planar.Component.factory.add(r,e)}return this}constructor(n){const r=this.constructor.schema;for(let e in r){let t=r[e];if("function"==typeof t)Object.defineProperty(this,e,{get:t.bind(this)});else{if(!Array.isArray(t))throw new Error(`"${e}" definition in schmea is invalid.`);{let[r,o]=t;if(void 0!==n[e]){if(n[e].constructor!==r)throw new Error(`"${e}" type is invlaid.`);this[e]=n[e]}else this[e]="function"==typeof o?o():o}}}}},Planar.Component.factory=new Planar.Factory(Planar.Component),Planar.Component.schema={},Planar.Component.define({animation:{},motion:{isStatic:[Boolean,!1],isSensor:[Boolean,!1],timeScale:[Number,1],force:[Planar.Point,()=>new Planar.Point],torque:[Number,0],area:[Number,0],mass:[Number,0],inertia:[Number,0],linearSpeed:[Number,0],linearVelocity:[Planar.Point,()=>new Planar.Point],angularSpeed:[Number,0],angularVelocity:[Number,0]},draw:{fillColor:[Number,0],fillAlpha:[Number,1],strokeWidth:[Number,0],strokeColor:[Number,0],strokeAlpha:[Number,1],isDynamic:[Boolean,!0]},filter:{alpha:[Number,1]},material:{density:[Number,.001],dynamicFriction:[Number,.1],airFriction:[Number,.01],staticFriction:[Number,.05],restitution:[Number,0]},player:{},shape:{type:[String,"rectangle"],radius:[Number,0],sides:[Number,0],width:[Number,0],height:[Number,0],points:[Array,[]],signature:function(){return this.type+this.points.length}},transform:{position:[Planar.Point,()=>new Planar.Point(0,0)],pivot:[Planar.Point,()=>new Planar.Point(0,0)],rotation:[Number,0]},warp:{scale:[Planar.Point,()=>new Planar.Point(1,1)]}})}();
!function(){Planar.Entity=class{constructor(t){this.app=t,this.iteration=0,this.components={},this.changed={},this.key=this.constructor.count++}update(t){this.iteration++}change(t){const n=this.iteration;for(let o in t){let i=t[o],r=this.components[o];if(r){let e;if("object"==typeof i)e=t[o];else{if("function"!=typeof i)throw new Error(`"${o}" component changer is the wrong type`);e=t[o](r)}"object"==typeof e&&Object.assign(r,e),this.changed[o]=n}if(this.app.debug){let t=r.constructor.schema;for(let n in r){let o=t[n];if(Array.isArray(typeof o)){let t=r[n],[i]=o;if(void 0===o)throw new Error(`"${n}" is an invalid property.`);if(t.constructor!==i)throw new Error(`"${t.constructor.name}" is the wrong type.`)}}}}return this}handle(...t){const n=this.iteration;var[o,i]=t,[r]=t;if("string"==typeof constructor&&(o=[o]),Array.isArray(o)&&"function"==typeof i){let t=[],r=0;for(let e of o){let o=this.components[e];o&&this.changed[e]>=n&&r++,t.push(o)}r&&i(...t)}else if(r.constructor===Object)for(let e in r){let t=this.components[e];t&&this.changed[e]>=n&&r[e](t)}return this}add(t){for(let n in t){let o=Planar.Component.factory.create(n,t[n]);this.components[n]=o,this.changed[n]=this.iteration}}remove(...t){for(let n of t)delete this.components[n],delete this.changed[n];return this}select(...t){const n={};for(let o of t)n[o]=this.components[o];return n}has(...t){for(let n of t)if(void 0===this.components[n])return!1;return!0}},Planar.Entity.count=0}();
!function(){Planar.Input=class{constructor(n){this.element=n}}}();
!function(){Planar.System=class{constructor(){this.entities=new Set}isRelated(t){return!0}add(t){this.entities.add(t)}delete(t){this.entities.delete(t)}has(t){this.entities.has(t)}update(t){}}}();
!function(){Planar.Input.Keyboard=class extends Planar.Input{constructor(A){super(A),this.keys={},this.element.addEventListener("keydown",A=>{this.keys[A.keyCode]=!0}),this.element.addEventListener("keyup",A=>{this.keys[A.keyCode]=!1})}},Planar.Input.Keyboard.codes={A:"A".charCodeAt(0),B:"B".charCodeAt(0),C:"C".charCodeAt(0),D:"D".charCodeAt(0),E:"E".charCodeAt(0),F:"F".charCodeAt(0),G:"G".charCodeAt(0),H:"H".charCodeAt(0),I:"I".charCodeAt(0),J:"J".charCodeAt(0),K:"K".charCodeAt(0),L:"L".charCodeAt(0),M:"M".charCodeAt(0),N:"N".charCodeAt(0),O:"O".charCodeAt(0),P:"P".charCodeAt(0),Q:"Q".charCodeAt(0),R:"R".charCodeAt(0),S:"S".charCodeAt(0),T:"T".charCodeAt(0),U:"U".charCodeAt(0),V:"V".charCodeAt(0),W:"W".charCodeAt(0),X:"X".charCodeAt(0),Y:"Y".charCodeAt(0),Z:"Z".charCodeAt(0),ZERO:"0".charCodeAt(0),ONE:"1".charCodeAt(0),TWO:"2".charCodeAt(0),THREE:"3".charCodeAt(0),FOUR:"4".charCodeAt(0),FIVE:"5".charCodeAt(0),SIX:"6".charCodeAt(0),SEVEN:"7".charCodeAt(0),EIGHT:"8".charCodeAt(0),NINE:"9".charCodeAt(0),NUMPAD_0:96,NUMPAD_1:97,NUMPAD_2:98,NUMPAD_3:99,NUMPAD_4:100,NUMPAD_5:101,NUMPAD_6:102,NUMPAD_7:103,NUMPAD_8:104,NUMPAD_9:105,NUMPAD_MULTIPLY:106,NUMPAD_ADD:107,NUMPAD_ENTER:108,NUMPAD_SUBTRACT:109,NUMPAD_DECIMAL:110,NUMPAD_DIVIDE:111,F1:112,F2:113,F3:114,F4:115,F5:116,F6:117,F7:118,F8:119,F9:120,F10:121,F11:122,F12:123,F13:124,F14:125,F15:126,COLON:186,EQUALS:187,COMMA:188,UNDERSCORE:189,PERIOD:190,QUESTION_MARK:191,TILDE:192,OPEN_BRACKET:219,BACKWARD_SLASH:220,CLOSED_BRACKET:221,QUOTES:222,BACKSPACE:8,TAB:9,CLEAR:12,ENTER:13,SHIFT:16,CONTROL:17,ALT:18,CAPS_LOCK:20,ESC:27,SPACEBAR:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,PLUS:43,MINUS:44,INSERT:45,DELETE:46,HELP:47,NUM_LOCK:144}}();
!function(){Planar.Input.Mouse=class extends Planar.Input{constructor(t){super(t),this.over=!1,this.buttons={},this.wheel={x:0,y:0,z:0},this.position={x:0,y:0},this.element.addEventListener("mouseover",t=>{this.over=!0}),this.element.addEventListener("mouseout",t=>{this.over=!1}),this.element.addEventListener("mousedown",t=>{this.buttons[t.button]=!0}),this.element.addEventListener("mouseup",t=>{this.buttons[t.button]=!1}),this.element.addEventListener("wheel",t=>{this.wheel.x+=t.deltaX,this.wheel.y+=t.deltaY,this.wheel.z+=t.deltaZ}),this.element.addEventListener("mousemove",t=>{this.position.x=t.clientX,this.position.Y=t.clientY})}}}();
!function(){Planar.System.Animation=class extends Planar.System{constructor(){super(),this.tweens=new Map}isRelated(e){return e.has("animation")}add(e){super.add(e),this.tweens.set(e.key,{value:0})}delete(e){super.delete(e),this.tweens.delete(e.key)}update(e){for(let n of this.entities){let t=this.tweens.get(n.key);if(t.value+=e,t.value%100===0){let e=Math.round(2*Math.random());n.change({shape:{type:["rectangle","circle","ngon"][e]}})}n.change({warp:{scale:new Planar.Point(1.5+.5*Math.sin(t.value*(Math.PI/1e3)),1.5+.5*Math.cos(t.value*(Math.PI/1e3)))}})}}}}();
!function(){function e(e){var t;switch(e.type){case"rectangle":const n=e.width/2,a=e.height/2;t=[{x:-n,y:-a},{x:n,y:-a},{x:n,y:a},{x:-n,y:a}];break;case"circle":case"ngon":let{radius,sides}=e;("circle"===e.type||sides<3)&&(sides=Math.ceil(Math.max(10,Math.min(25,radius))));const c=2*Math.PI/sides,r=.5*c;t=[];for(let s=0;s<sides;s++){let e=r+s*c;t[s]={x:Math.cos(e)*radius,y:Math.sin(e)*radius}}break;case"polygon":t=e.points;break;default:throw new Error(`"${e.type}" shape type is invalid.`)}return{points:t}}Planar.System.Geometry=class extends Planar.System{isRelated(e){return e.has("shape")}add(t){super.add(t),t.change({shape:e})}update(t){for(let n of this.entities)n.handle({shape:t=>{n.change({shape:e})}})}}}();
!function(){function e(e,t,i){i.fillAlpha&&e.beginFill(i.fillColor,i.fillAlpha),i.strokeWidth&&i.strokeAlpha&&e.lineStyle(i.strokeWidth,i.strokeColor,i.strokeAlpha),e.drawCircle(0,0,t),i.fillAlpha&&e.endFill(),e.cacheAsBitmap=!i.isDynamic}function t(e,t,i){const n=[];i.fillAlpha&&e.beginFill(i.fillColor,i.fillAlpha),i.strokeWidth&&i.strokeAlpha&&e.lineStyle(i.strokeWidth,i.strokeColor,i.strokeAlpha);for(let a=0,l=t.length;a<l;a++)n[a]=new PIXI.Point(t[a].x,t[a].y);e.drawPolygon(n),i.fillAlpha&&e.endFill(),e.cacheAsBitmap=!i.isDynamic}Planar.System.Graphics=class extends Planar.System{constructor(){super(),this.renderer=PIXI.autoDetectRenderer(512,512,!1,!0),this.stage=new PIXI.Container,this.graphics=new Map,document.body.appendChild(this.renderer.view)}isRelated(e){return e.has("draw","shape","transform")}add(e){super.add(e);const t=new PIXI.Graphics;this.graphics.set(e.key,t),this.stage.addChild(t)}delete(e){super.delete(e);const t=this.graphics.get(e.key);this.graphics.delete(e.key),this.stage.removeChild(t)}update(i){for(let n of this.entities){const i=this.graphics.get(n.key);n.handle(["shape","draw"],(n,a)=>{switch(i.clear(),n.type){case"circle":e(i,n.radius,a);break;default:t(i,n.points,a)}}),n.handle({transform:e=>{i.position.copy(e.position),i.rotation=e.rotation},warp:e=>{i.scale.copy(e.scale)},filter:e=>{i.alpha=e.alpha}})}this.renderer.render(this.stage)}}}();
!function(){function t(t){const{shape,transform,warp}=t.components,e=Matter.Bodies.fromVertices(0,0,[shape.points]);if(!e)throw new Error("Invalid shape.");return Matter.Body.translate(e,transform.position),warp&&Matter.Body.scale(e,warp.scale.x,warp.scale.y),Matter.Body.rotate(e,transform.rotation),e}function e(t,e){const{shape,transform,warp}=t.components,i=e.vertices;for(let n=0,o=shape.points.length;n<o;n++)({x:i[n].x,y:i[n].y})=shape.points[n];warp&&Matter.Vertices.scale(i,warp.scale.x,warp.scale.y,transform.pivot),Matter.Vertices.rotate(i,transform.rotation,transform.pivot),Matter.Body.setVertices(e,i)}Planar.System.Physics=class extends Planar.System{constructor(){super(),this.engine=Matter.Engine.create({enableSleep:!0}),this.world=this.engine.world,this.bodies=new Map,this.signatures=new Map}isRelated(t){return t.has("shape","motion","transform")}add(e){super.add(e);const i=t(e);this.bodies.set(e.key,i),this.signatures.set(e.key,e.components.shape.signature),Matter.World.add(this.world,i)}delete(t){super.delete(t);const e=this.bodies.get(t.key);this.bodies.delete(t.key),this.signatures.delete(t.key),Matter.World.remove(this.world,e)}update(i){for(let n of this.entities){let i=this.bodies.get(n.key);n.handle(["shape","warp"],(o,s)=>{o.signature!==this.signatures.get(n.key)?(Matter.World.remove(this.world,i),i=t(n),this.bodies.set(n.key,i),this.signatures.set(n.key,o.signature),Matter.World.add(this.world,i)):e(n,i)}),n.handle({material:t=>{Matter.Body.set(i,{density:t.density,friction:t.dynamicFriction,airFriction:t.airFriction,frictionStatic:t.staticFriction,restitution:t.restitution})},motion:t=>{Matter.Body.set(i,{isStatic:t.isStatic,isSensor:t.isSensor,timeScale:t.timeScale}),t.force&&(i.force.x+=t.force.x,i.force.y+=t.force.y,t.force.x=0,t.force.y=0),t.torque&&(i.torque+=t.torque,t.torque=0)}})}Matter.Engine.update(this.engine,i);for(let n of this.entities){let t=this.bodies.get(n.key);n.change({transform:{position:new Planar.Point(t.position),rotation:t.angle},motion:{area:t.area,mass:t.mass,inertia:t.inertia,linearSpeed:t.speed,linearVelocity:new Planar.Point(t.velocity),angularSpeed:t.angularSpeed,angularVelocity:t.angularVelocity}})}}}}();
!function(){Planar.System.Player=class extends Planar.System{constructor(){super(),this.keyboard=new Planar.Input.Keyboard(window)}isRelated(n){return n.has("player","motion")}update(n){const o=this.keyboard.keys,e=Planar.Input.Keyboard.codes;for(let t of this.entities)(o[e.UP]||o[e.DOWN]||o[e.LEFT]||o[e.RIGHT]||o[e.SPACEBAR])&&t.change({motion:n=>{const t=.005*n.mass;o[e.UP]&&(n.force.y-=t),o[e.DOWN]&&(n.force.y+=t),o[e.LEFT]&&(n.force.x-=t/2),o[e.RIGHT]&&(n.force.x+=t/2),o[e.SPACEBAR]&&(n.torque+=t)}})}}}();
!function(){Planar.System.Stats=class extends Planar.System{constructor(){super(),this.stats=new Stats,document.body.appendChild(this.stats.dom)}isRelated(t){return!1}update(t){this.stats.begin(),this.stats.end()}}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
